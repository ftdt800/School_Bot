# -*- coding: utf-8 -*-
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ParseMode
from config import *
import sqlite3 as sl
import asyncio
import datetime
import aioschedule
import emoji
import secrets
from aiogram.utils import executor
import re #–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
from aiogram.utils.markdown import text
from aiogram.utils.callback_data import CallbackData
from aiogram.dispatcher import Dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
print(admin_id, API_TOKEN)# testing import config file
# __________________________–î–∞–Ω–Ω—ã–µ –±–æ—Ç–∞__________________________
timelist_start = ["13:15","14:00", "14:55", "15:50", "16:45", "17:35", "18:20"]
timelist_end = ["16:07","12:55","13:55", "14:40", "15:35", "16:30", "17:25", "18:15"]
friendlylist = ["–ö–∞–∫ —Å–ª–µ–¥—É–µ—Ç –æ—Ç–¥–æ—Ö–Ω–∏ –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–µ, –∏ –±–µ–≥–æ–º –Ω–∞ —É—Ä–æ–∫" + emoji.emojize(":smiling_face_with_smiling_eyes:")+ "\n–ù–∞ —á–∞—Å–∞—Ö —Ç–µ–º –≤—Ä–µ–º–µ–Ω–µ–º —É–∂–µ ",
                "–ù–∞–¥–µ—é—Å—å —É —Ç–µ–±—è –æ—Å—Ç–∞–ª–∏—Å—å —Å–∏–ª—ã –Ω–∞ –µ—â—ë –æ–¥–∏–Ω —É—Ä–æ–∫"+ emoji.emojize(":winking_face:") + "\n–£—á–∏—Å—å —Ö–æ—Ä–æ—à–æ, —è –±—É–¥—É —Å–ª–µ–¥–∏—Ç—å!" + emoji.emojize(":upside-down_face:")+ "\n–°–µ–π—á–∞—Å ",
                "–ú–Ω–µ —Ç—É—Ç –∞–Ω–µ–∫–¥–æ—Ç –≤—Å–ø–æ–º–Ω–∏–ª—Å—è, –∫–∞–∫-—Ç–æ —Ä–∞–∑ –Ω–∞ —ç–∫–∑–∞–º–µ–Ω–µ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ –æ–¥–∏–Ω —É—á–µ–Ω–∏–∫ –∑–∞–≥–Ω—É–ª —Ç–∞–∫–æ–µ, —á—Ç–æ –¥–∞–∂–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –ø–µ—Ä–µ—Å–µ–∫–ª–∏—Å—å.\n–í–æ—Ç —É–º–æ—Ä–∞, —è —á—É—Ç—å –Ω–µ –∑–∞–≤–∏—Å –æ—Ç —Å–º–µ—Ö–∞" + emoji.emojize(":face_with_tears_of_joy:") + "\n–ê —Ç–µ–º –≤—Ä–µ–º–µ–Ω–µ–º –Ω–∞ —á–∞—Å–∞—Ö "
                ]
weekdays = {1: '<b>–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫</b>',
            2: '<b>–í—Ç–æ—Ä–Ω–∏–∫</b>',
            3: '<b>–°—Ä–µ–¥–∞</b>',
            4: '<b>–ß–µ—Ç–≤–µ—Ä–≥</b>',
            5: '<b>–ü—è—Ç–Ω–∏—Ü–∞</b>',
            6: '<b>–°—É–±–±–æ—Ç–∞</b>',
            7: '<b>–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ</b>'}
klass = {"8V": 1,
        "8A": 2,
         "8B": 3}
cb = CallbackData("text","action")
main_inline_full = InlineKeyboardMarkup(row_width=2)
main_inline_full.add(InlineKeyboardButton('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è...', callback_data='raspisanie'))
main_inline_full.add(InlineKeyboardButton('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —É—Ä–æ–∫–∞...', callback_data='signal'))
rasp_inline_full = InlineKeyboardMarkup(row_width=2)
rasp_inline_full.add(InlineKeyboardButton(emoji.emojize(":check_mark_button:")+'–í–∫–ª—é—á–∏—Ç—å', callback_data='on_signal'))
rasp_inline_full.add(InlineKeyboardButton(emoji.emojize(":no_entry:")+'–û—Ç–∫–ª—é—á–∏—Ç—å', callback_data='off_signal'))
admin_klass = InlineKeyboardMarkup(row_width=2)
admin_klass.add(InlineKeyboardButton('8A...', callback_data='admin_8A'))
admin_klass.add(InlineKeyboardButton('8–í...', callback_data='admin_8V'))
add_in_klass = InlineKeyboardMarkup(row_width=4)
add_in_8A = (InlineKeyboardButton('8A...', callback_data='add_in_8A'))
add_in_8B = (InlineKeyboardButton('8–ë...', callback_data='add_in_8B'))
add_in_8V = (InlineKeyboardButton('8–í...', callback_data='add_in_8V'))
add_in_another = (InlineKeyboardButton('–£—á–∏—Ç–µ–ª—å...', callback_data='add_in_Teacher'))
add_in_klass.add(add_in_8A, add_in_8B, add_in_8V, add_in_another)
admin_rasp_inline_full = InlineKeyboardMarkup(row_width=3)
admin_back_list = (InlineKeyboardButton(emoji.emojize(":backhand_index_pointing_left:")+"–ü—Ä–µ–¥...", callback_data='admin_back_list'))
admin_change_list = (InlineKeyboardButton(emoji.emojize(":pencil:")+ "–ò–∑–º–µ–Ω–∏—Ç—å...", callback_data='admin_change_list'))
admin_next_list = (InlineKeyboardButton("–°–ª–µ–¥..."+emoji.emojize(":backhand_index_pointing_right:"), callback_data='admin_next_list'))
admin_rasp_inline_full.add(admin_back_list, admin_change_list, admin_next_list)
admin_cheking = InlineKeyboardMarkup(row_width=2)
admin_cheking_no = (InlineKeyboardButton("–ù–µ—Ç! –ò–∑–º–µ–Ω–∏—Ç—å..."+emoji.emojize(":no_entry:"), callback_data='admin_cheking_no'))
admin_cheking_yes = (InlineKeyboardButton("–í—Å—ë –≤–µ—Ä–Ω–æ"+emoji.emojize(":check_mark_button:"), callback_data='admin_cheking_yes'))
admin_cheking.add(admin_cheking_yes, admin_cheking_no)
send_menu = InlineKeyboardMarkup(row_width=2)
send_menu.add(InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—åüí¨", callback_data=cb.new(action="send")),
              InlineKeyboardButton(text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data=cb.new(action='application')))
def admin_menu(ID):
    menu = InlineKeyboardMarkup(row_width=2)
    menu.add(InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å‚úÖ", callback_data=f"#y{str(ID)}"),
             InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å‚ùå", callback_data=f'#n{str(ID)}'))
    return menu
#==========================================================FSM Machine (–ö–æ—Å—Ç—ã–ª—å + –í–µ–ª–æ—Å–∏–ø–µ–¥)
class get_answer(StatesGroup):
    answer1 = State()
class Form(StatesGroup):
    name = State()
async def send_state(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    action = callback_data["action"]
    if action == "send":
        await bot.send_message(admin_id, f"–ü–æ—Å—Ç—É–ø–∏–ª–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç @{str(ans0)}\n"#username
                                         f"–ö–ª–∞—Å—Å: <b>{str(ans1)}</b>\n"#klass
                                         f"–¢–µ–ª–µ–≥—Ä–∞–º –∞–π–¥–∏: <b>{str(ans2)}</b>\n"#user_id
                               , parse_mode=types.ParseMode.HTML, reply_markup=admin_menu(call.from_user.id))
        await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id, text="–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.")
        await state.finish()
    if action == "application":
        await state.finish()
        await send_welcome(message = call)
    await call.answer()
async def access(call: types.CallbackQuery):  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏
    temp = [call.data[1:2], call.data[2:]]
    if temp[0] == "y":
        await bot.edit_message_text(chat_id=admin_id, message_id=call.message.message_id, text="–í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞—è–≤–∫—É‚úÖ")
        await bot.send_message(temp[1], f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É ‚úÖ\n\n'
                                        f'–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–∞—Ö —É—Ä–æ–∫–æ–≤, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!\n'
                                        f'–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –º–µ–Ω—é –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu', disable_web_page_preview=True, parse_mode=types.ParseMode.HTML)
        try:
            sql = sl.connect('DataBase.db')
            cursor = sql.cursor()
            print("–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ SQLite")
            if ans1 == "Teacher":
                admin_status = 'True'
            else:
                admin_status = 'False'
            print(ans2,admin_status,ans1,ans0)
            sqlite_insert_query = """INSERT INTO USER
                                  (id, admin, class, notifications, username)
                                  VALUES(?, ?, ?, ?, ?);"""
            changing = (ans2,admin_status,ans1,'False','@'+ans0)
            cursor.execute(sqlite_insert_query,changing)
            sql.commit()
            print("–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–∞ ‚Äã‚Äã–≤ —Ç–∞–±–ª–∏—Ü—É", cursor.rowcount)
            cursor.close()

        except sl.Error as error:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å SQLite", error)
        finally:
            if sql:
                sql.close()
                print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å SQLite –∑–∞–∫—Ä—ã—Ç–æ")
    elif temp[0] == "n":
        await bot.edit_message_text(chat_id=admin_id, message_id=call.message.message_id, text="–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞—è–≤–∫—É‚ùå")
        await bot.send_message(temp[1], '–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –Ω–∞–º –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç–µ ‚ùå')

    await call.answer()
async def confirm_send(call: types.CallbackQuery,answer1):
    print(call.from_user.id, call.from_user.username, answer1)
    await bot.send_message(call.from_user.id, f'–í—ã –≤—ã–±—Ä–∞–ª–∏: <b>{answer1}</b>', parse_mode=types.ParseMode.HTML,reply_markup=send_menu)
    global ans1
    global ans2
    global ans0
    ans1 = answer1
    ans2 = call.from_user.id
    ans0 = call.from_user.username
@dp.callback_query_handler(lambda c: c.data == 'admin_change_list')
async def cmd_start(call: CallbackQuery):
    await Form.name.set()
    await call.message.answer("–í–ø–∏—à–∏—Ç–µ –Ω—É–∂–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å 0 —É—Ä–æ–∫–∞ –ø–æ 6, –≤ —Å–ª—É—á–∞–∏ –æ—Ç—Å—É—Ç—Å–≤–∏–∏ —É—Ä–æ–∫–∞ —Å—Ç–∞–≤—å—Ç–µ –∑–Ω–∞–∫ '-'"
                              "\n–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: (–ü–µ—Ä–≤—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —É—Ä–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)\n"
                              +weekdays.get(schedule_int+1)+
                              "\n"
                              + emoji.emojize(":down_arrow:") + emoji.emojize(":down_arrow:") + emoji.emojize(":down_arrow:") +
                              "\n-"
                              "\n–û–ë–ñ –≤ 213"
                              "\n–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ –≤ 306"
                              "\n–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞ –≤ 306"
                              "\n–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ –≤ 404"
                              "\n–ê–ª–≥–µ–±—Ä–∞ –≤ 305"
                              "\n-"
                              "\n"
                              + emoji.emojize(":up_arrow:") + emoji.emojize(":up_arrow:") + emoji.emojize(":up_arrow:") +
                              "\n–í—Ä–µ–º—è, –∫–∞–∫ –∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –ø–æ–¥–≥–æ–Ω—è—é—Ç—Å—è <u>–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</u>, —É–∫–∞–∑—ã–≤–∞—Ç—å –∏—Ö –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è", parse_mode="HTML")
@dp.message_handler(state='*', commands='cancel')
@dp.message_handler(Text(equals='–æ—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await message.reply('–ù—É –ª–∞–¥–Ω–æ, –æ—Ç–º–µ–Ω–∞')
@dp.message_handler(state=Form.name)
async def process_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
        print(data['name'] + "–ª–∞–ª")
        global DataTextCustom
        DataTextCustom = data['name']
        await message.reply('–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n–ò–∑–º–µ–Ω—ë–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ '+weekdays.get(schedule_int+1)+'\n <code>'+ DataTextCustom +'</code>\n–í—Å—ë –≤–µ—Ä–Ω–æ?',parse_mode="HTML", reply_markup=admin_cheking)
    await state.finish()
#==================================================
@dp.message_handler(commands=['start', 'help', 'menu'])#First message
async def send_welcome(message: types.Message):
    sql = sl.connect('DataBase.db')
    cursor = sql.cursor()
    cursor.execute("SELECT COUNT(*) FROM USER WHERE id = ?", (message.from_user.id,))
    if cursor.fetchone()[0] > 0:
        await bot.send_message(message.from_user.id,f'–ü—Ä–∏–≤–µ—Ç –∂–∏—Ç–µ–ª—å –°–µ–¥—å–º–æ–≥–æ –ö–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–∞!'+ emoji.emojize(":winking_face:")+'\n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ —à–∫–æ–ª—å–Ω–æ–π —Ä—É—Ç–∏–Ω–æ–π, –º–æ–∂–µ—à—å –ø–æ–ª–æ–∂–∏—Ç—å—Å—è –Ω–∞ –º–µ–Ω—è...\n–Ø –º–æ–≥—É –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤,'+ emoji.emojize(":bell:")+'\n–ù–∞–ø–∏—Å–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è,'+ emoji.emojize(":pushpin:")+'\n–ò –º–Ω–æ–≥–æ —á–µ–≥–æ –µ—â—ë...)\n–ù–∏–∂–µ —Ç—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é!'+ emoji.emojize(":backhand_index_pointing_down:"),parse_mode="Markdown", reply_markup=main_inline_full)
    else:
        await bot.send_message(message.from_user.id, "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –í–∞—Å –µ—â—ë –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ —É—á–∞—â–∏—Ö—Å—è 7 —à–∫–æ–ª—ã –≥–æ—Ä–æ–¥–∞ –ö–µ–º–µ—Ä–æ–≤–æ, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –∫–ª–∞—Å—Å –Ω–∏–∂–µ..."+ emoji.emojize(":backhand_index_pointing_down:"),parse_mode="Markdown", reply_markup=add_in_klass)
    sql.close()
    cursor.close()
@dp.message_handler(commands=['admin'])#Admin panel
async def admin_panel(message: types.Message):
    await bot.send_message(message.from_user.id,'–ü—Ä–∏–≤–µ—Ç —É—á–∏—Ç–µ–ª—å –°–µ–¥—å–º–æ–≥–æ –ö–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–∞!\n–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å, –∑–∞–º–µ–Ω—è—Ç—å –∏ —É–¥–∞–ª—è—Ç—å —É—Ä–æ–∫–∏, –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏ –µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏\n–ù–∏–∂–µ –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –∫–ª–∞—Å—Å\n'+ emoji.emojize(":backhand_index_pointing_down:")+ emoji.emojize(":backhand_index_pointing_down:")+ emoji.emojize(":backhand_index_pointing_down:"), reply_markup=admin_klass)
@dp.callback_query_handler(lambda c: c.data == 'add_in_8A')
async def process_callback_button(call: types.CallbackQuery):
    await confirm_send(call, answer1="8A",)
@dp.callback_query_handler(lambda c: c.data == 'add_in_8B')
async def process_callback_button(call: types.CallbackQuery):
    await confirm_send(call, answer1="8B",)
@dp.callback_query_handler(lambda c: c.data == 'add_in_8V')
async def process_callback_button(call: types.CallbackQuery):
    await confirm_send(call, answer1="8V",)
@dp.callback_query_handler(lambda c: c.data == 'add_in_Teacher')
async def process_callback_button(call: types.CallbackQuery):
    await confirm_send(call, answer1="Teacher",)
@dp.callback_query_handler(lambda c: c.data == 'admin_8V')
async def process_callback_button(callback_query: types.CallbackQuery):
    await admin_preview_list(callback_query, klass=1)
@dp.callback_query_handler(lambda c: c.data == 'admin_8A')
async def process_callback_button(callback_query: types.CallbackQuery):
    await admin_preview_list(callback_query, klass=2)
async def admin_preview_list(callback_query: types.CallbackQuery, klass):
    await bot.answer_callback_query(callback_query.id)
    global klass_int
    global schedule_int
    schedule_int = 0
    klass_int = klass
    with open('rasp.txt', mode="r+", encoding="utf-8") as file:
        textlist = file.read().split("===")  # transform in massive
        print(textlist[klass_int])
        print(str(str(textlist[klass_int]).split("\n")[datetime.datetime.today().weekday()]).split(","))
        schedulelist = str(str(textlist[klass_int]).split("\n")[schedule_int+4]).split(",")
        Massiv_sum = [list(a) for a in zip(timelist_start, schedulelist)]
        text = '<u>'+'\n<u>'.join('</u> > '.join(l) for l in Massiv_sum)
        await bot.send_message(callback_query.from_user.id, weekdays.get(schedule_int+1)+"\n"+text, parse_mode="HTML", reply_markup=admin_rasp_inline_full)
@dp.callback_query_handler(lambda c: c.data == 'admin_next_list')#next
async def process_callback_button(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    global klass_int
    global schedule_int
    if schedule_int < 4:
        schedule_int += 1
    with open('rasp.txt', mode="r+", encoding="utf-8") as file:
        textlist = file.read().split("===")  # transform in massive
        print(textlist[klass_int])
        print(str(str(textlist[klass_int]).split("\n")[datetime.datetime.today().weekday()]).split(","))
        schedulelist = str(str(textlist[klass_int]).split("\n")[schedule_int+4]).split(",")
        Massiv_sum = [list(a) for a in zip(timelist_start, schedulelist)]
        text = '<u>'+'\n<u>'.join('</u> > '.join(l) for l in Massiv_sum)
        await callback_query.message.edit_text(weekdays.get(schedule_int+1)+"\n"+text, parse_mode="HTML", reply_markup=admin_rasp_inline_full)
@dp.callback_query_handler(lambda c: c.data == 'admin_back_list')#back
async def process_callback_button(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    global klass_int
    global schedule_int
    if schedule_int > 0:
        schedule_int -= 1
    with open('rasp.txt', mode="r+", encoding="utf-8") as file:
        textlist = file.read().split("===")  # transform in massive
        print(textlist[klass_int])
        print(str(str(textlist[klass_int]).split("\n")[datetime.datetime.today().weekday()]).split(","))
        schedulelist = str(str(textlist[klass_int]).split("\n")[schedule_int+4]).split(",")
        Massiv_sum = [list(a) for a in zip(timelist_start, schedulelist)]
        text = '<u>'+'\n<u>'.join('</u> > '.join(l) for l in Massiv_sum)
        await callback_query.message.edit_text(weekdays.get(schedule_int+1)+"\n"+text, parse_mode="HTML", reply_markup=admin_rasp_inline_full)
@dp.callback_query_handler(lambda c: c.data == 'raspisanie')
async def process_callback_button(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_photo(callback_query.from_user.id, photo = open('rasp.jpeg', 'rb'), caption="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ 10.02.2023"+emoji.emojize(":winking_face:"))
@dp.callback_query_handler(lambda c: c.data == 'signal')#
async def process_callback_button(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id,"–§—É–Ω–∫—Ü–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è!\n–í–∫–ª—é—á–∏, –∏ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —É—Ä–æ–∫–æ–º —è –±—É–¥—É –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫"+emoji.emojize(":winking_face:"),reply_markup=rasp_inline_full)
@dp.message_handler()# –ü—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
async def echo_message(message: types.Message):
    await message.reply("–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ–≥–æ... –î–ª—è –≤—ã–∑–æ–≤–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ —Å—é–¥–∞ -> /start")
@dp.callback_query_handler(lambda c: c.data == 'on_signal')#
async def process_callback_button(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id,emoji.emojize(":check_mark_button:") + "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —É—Ä–æ–∫–∞—Ö –≤–∫–ª—é—á–µ–Ω—ã!")
    sql = sl.connect('DataBase.db')
    cursor = sql.cursor()
    cursor.execute('SELECT notifications FROM USER WHERE notifications="False" AND id="' + str(callback_query.from_user.id) + '"').fetchall()  # search myself
    cursor.execute('UPDATE USER SET notifications=? WHERE id=?',('True', callback_query.from_user.id))  # refresh info
    print(f'–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ True –¥–ª—è —Å–ª–µ–¥—É–µ—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback_query.from_user.id}')
    sql.commit()
    sql.close()
@dp.callback_query_handler(lambda c: c.data == 'off_signal')#
async def process_callback_button(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id,emoji.emojize(":no_entry:") + "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —É—Ä–æ–∫–∞—Ö –≤—ã–∫–ª—é—á–µ–Ω—ã!")
    sql = sl.connect('DataBase.db')
    cursor = sql.cursor()
    cursor.execute('SELECT notifications FROM USER WHERE notifications="True" AND id="'+str(callback_query.from_user.id)+'"').fetchall()# search myself
    cursor.execute('UPDATE USER SET notifications=? WHERE id=?', ('False', callback_query.from_user.id))  # refresh info
    print(f'–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ False –¥–ª—è —Å–ª–µ–¥—É–µ—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback_query.from_user.id}')
    sql.commit()
    sql.close()
async def aioschelder_loop():
    while True:
        await aioschedule.run_pending()
        await asyncio.sleep(1)
async def on_startup(_):
    #await time_print(time_str="16:30")#debug function
    #return
    if datetime.datetime.today().weekday() == 0:
        for date in timelist_end:
            aioschedule.every().monday.at(time_str=date).do(time_print, time_str=date)
    if datetime.datetime.today().weekday() == 1:
        for date in timelist_end:
            aioschedule.every().tuesday.at(time_str=date).do(time_print, time_str=date)
    if datetime.datetime.today().weekday() == 2:
        for date in timelist_end:
            aioschedule.every().wednesday.at(time_str=date).do(time_print, time_str=date)
    if datetime.datetime.today().weekday() == 3:
        for date in timelist_end:
            aioschedule.every().thursday.at(time_str=date).do(time_print, time_str=date)
    if datetime.datetime.today().weekday() == 4:
        for date in timelist_end:
            aioschedule.every().friday.at(time_str=date).do(time_print, time_str=date)
            print(date)
    #asyncio.create_task(aioschelder_loop()) #comments for debug function
    print('–ú–µ—Ç–∫–∞ –≤—ã–∑–æ–≤–∞ –≤—Ä–µ–º–µ–Ω–∏'+str(datetime.datetime.today().weekday()) + datetime.datetime.today().strftime('%H:%M'))

async def time_print(time_str):
    print("–í—Ä–µ–º—è —Å–µ–π—á–∞—Å, "+time_str)
    sql = sl.connect('DataBase.db')
    users = sql.execute("SELECT id FROM USER WHERE notifications='True'").fetchall()
    clas = sql.execute("SELECT class FROM USER WHERE notifications='True'").fetchall()
    for i in range(len(users)):
        print(str(users[i][0])+ " –∞–π–¥–∏")
        print(clas[i][0]+ " –∫–ª–∞—Å—Å")
        print(str(datetime.datetime.today().weekday())+ " –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏")
        print(str(klass.get(clas[i][0]))+ " –∫–ª–∞—Å—Å –Ω–æ —Ü—ã—Ñ—Ä–∞")#number klass in base
        with open('rasp.txt', mode="r+", encoding="utf-8") as file:
            textlist = file.read().split("===")
            print(textlist[(klass.get(clas[i][0]))])#list all schedule
            usertextlist = textlist[(klass.get(clas[i][0]))]
            #print((str(usertextlist).split("\n")[datetime.datetime.today().weekday()+4]).split(","))#+4 for normal work
        schedulelist_str = (str(usertextlist).split("\n")[datetime.datetime.today().weekday()+4]).split(",")
        await bot.send_message(users[i][0], "<u>" + str(schedulelist_str[timelist_end.index(time_str)])+"</u>\n"+ str(secrets.choice(friendlylist)) +"<u>" + str(timelist_end[timelist_end.index(time_str)])+ "</u>", parse_mode="HTML")
# async def scheduler():
#     while True:
#         for timecicle in timelist_manday:
#             print(timecicle)
#             aioschedule.every().day.at(timecicle).do(time_print,timecicle)
#         print("–í–æ—É")
#         await aioschedule.run_pending()
#         await asyncio.sleep(2)
#
# async def on_startup(_):
#     asyncio.create_task(scheduler())
def register_handlers_client(dp: Dispatcher):
    dp.register_callback_query_handler(send_state, cb.filter(action=["send", "application"]), state="*")
    dp.register_callback_query_handler(access, text_contains="#")
register_handlers_client(dp)  # –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=False, on_startup=on_startup)